<?xml version="1.0" encoding="UTF-8"?>
<project name="VirtualGoods" basedir="." default="help">

	<!-- Arquivos de propriedades para build -->
	<property file="build.properties" />

	<!-- Variáveis -->
	<property name="srcdir" value="src" />
	<property name="configdir" value="config" />
	<property name="testdir" value="test" />
	<property name="builddir" value="tempbuild" />
	<property name="distdir" value="dist" />
	<property name="webdir" value="web" />

	<property name="compile.javac.source" value="1.6" />
	<property name="compile.javac.target" value="1.6" />

	<property name="build.war.name" value="VirtualGoods.war" />
	<property name="build.package.name" value="VirtualGoods" />
	<property name="create.database.filename" value="create-virtualgoods-database.sql" />
	<property name="update.database.filename" value="update-virtualgoods-database.sql" />
		
	<property name="virtualgoodscore.home" value="../VirtualGoodsCore" />
	<property name="virtualgoodscore.jar" value="${virtualgoodscore.home}/dist/VirtualGoodsCore.jar" />
	<property name="virtualgoodscore.lib" value="${virtualgoodscore.home}/lib" />

	<path id="hibernatetool.lib">
		<path location="${virtualgoodscore.home}/lib/hibernate-tools.jar" />
		<path location="${virtualgoodscore.home}/lib/hibernate3.jar" />
		<path location="${virtualgoodscore.home}/lib/hibernate-annotations.jar" />
		<path location="${virtualgoodscore.home}/lib/ejb3-persistence.jar" />
		<path location="${virtualgoodscore.home}/lib/hibernate-entitymanager.jar" />
		<path location="${virtualgoodscore.home}/lib/jboss-archive-browsing.jar" />
		<path location="${virtualgoodscore.home}/lib/javassist.jar" />
		<path location="${virtualgoodscore.home}/lib/hibernate-commons-annotations.jar" />
		<path location="${virtualgoodscore.home}/lib/hibernate-validator.jar" />
		<path location="${virtualgoodscore.home}/lib/log/log4j-1.2.15.jar" />
		<path location="${virtualgoodscore.home}/lib/commons-collections-3.2.jar" />
		<path location="${virtualgoodscore.home}/lib/log/commons-logging-1.0.4.jar" />
		<path location="${virtualgoodscore.home}/lib/dom4j-1.6.1.jar" />
        <path>
            <fileset dir="database" >
                <include name="*.jar" />
            </fileset >
            <pathelement location="${builddir}/classes" />
        	<pathelement location="${virtualgoodscore.jar}" />
            <pathelement location="src" />
            <pathelement location="test/src" />
        </path>
	</path>
	
	<target name="clean" description="Limpa diretórios build e dist">
		<delete failonerror="false" dir="${distdir}" />
		<delete failonerror="false" dir="${builddir}" />
		<ant dir="${virtualgoodscore.home}" target="clean" antfile="${virtualgoodscore.home}/build.xml"/>
	</target>
	
	<target name="help" description="Mostra ajuda">
		<loadfile property="readme" srcfile="build-readme.txt" />
		<echo>${readme}</echo>
	</target>

	<target name="all" depends="clean, package" description="Limpa e gera tudo">
	</target>

	<target name="build-glassfish" depends="compile, database.schema.export, release-info" description="Compila e gera WAR">
		<mkdir dir="${distdir}" />
		<war destfile="${distdir}/${build.war.name}" webxml="${webdir}/WEB-INF/web.xml">
			<classes dir="${builddir}/classes" />
			<lib file="${virtualgoodscore.jar}" />
			<lib dir="${webdir}/WEB-INF/lib">
				<include name="*.jar" />
			</lib>
			<metainf file="${builddir}/release-info.txt" />
			<lib dir="${virtualgoodscore.lib}">
				<include name="*.jar" />
				<exclude name="servlet-api*" />
				<exclude name="jsp-api*" />
				<exclude name="commons-codec*" />
				<exclude name="commons-httpclient*" />
			</lib>
			<lib dir="${virtualgoodscore.lib}/log">
				<include name="*.jar" />
			</lib>
			<lib dir="${virtualgoodscore.lib}/spring">
				<include name="*.jar" />
			</lib>
			<fileset dir="${webdir}" excludes="**/web.xml, **/*.jar" />
		</war>
	</target>
	
	<!-- Constrói pacote para instalação da aplicação -->
	<target name="package" depends="build-glassfish" description="Gera pacote ZIP para instalação">
		<mkdir dir="${distdir}" />
		<zip destfile="${distdir}/${build.package.name}-${package.release}.zip">
			<!-- Inclui o arquivo WAR -->
			<zipfileset prefix="${build.package.name}/war" dir="${distdir}">
				<include name="${build.war.name}" />
			</zipfileset>
			<!-- Inclui arquivos de configuração -->
			<zipfileset prefix="${build.package.name}/config" dir="${configdir}">
				<include name="*"/>
			</zipfileset>
			<!-- Arquivos com drivers de banco -->
			<zipfileset prefix="${build.package.name}/database" dir="database">
				<include name="*.jar"/>
			</zipfileset>
			<!-- Arquivos para colocar no Common/Lib do Tomcat-->
			<zipfileset prefix="${build.package.name}/common_lib" dir="${virtualgoodscore.home}/lib">
				<include name="commons-codec-1.3.jar" />
				<include name="commons-httpclient-3.0.jar" />
			</zipfileset>
			<!-- Arquivo de ajuda para instalação -->
			<!--<zipfileset dir=".">
				<include name="install-readme.txt"/>
			</zipfileset>-->
		</zip>
	</target>

	<target name="compile" depends="VirtualGoodsCoreBuild" description="Compila o código">
		<mkdir dir="${builddir}/classes" />
		<javac srcdir="${srcdir}" destdir="${builddir}/classes" verbose="false" debug="on" fork="true" source="${compile.javac.source}" target="${compile.javac.target}">
			<classpath>
				<pathelement location="${virtualgoodscore.jar}" />
				<fileset dir="${webdir}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${virtualgoodscore.lib}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${virtualgoodscore.lib}/log">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${virtualgoodscore.lib}/spring">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${builddir}">
			<fileset dir="${configdir}" includes="*.*" />
		</copy>
		<copy todir="${builddir}/classes">
			<fileset dir="${srcdir}" includes="META-INF/*.*,**/resources/*.properties,**/resources/*.xml" />
		</copy>
	</target>

	<target name="VirtualGoodsCoreBuild">
		<ant dir="${virtualgoodscore.home}" target="buildCore" antfile="${virtualgoodscore.home}/build.xml">
		</ant>
	</target>
	
	<target name="release-info">
		<tstamp>
			<format property="package.date" pattern="dd/MM/yyyy HH:mm"/>
			<format property="package.tstamp" pattern="yyyyMMddHHmmss"/>
		</tstamp>

		<!-- Get the name of the user who is building this package -->
		<property name="package.builtby" value="${user.name}"/>

		<!-- Test whether Subversion for command-line is installed -->
		<exec executable="svnversion" outputproperty="package.svninfo.globalrev" failifexecutionfails="false" >
			<arg line="."/>
		</exec>
		<fail unless="package.svninfo.globalrev" message="Subversion for command-line is not installed. Install it from http://subversion.tigris.org or contact your system adminstrator."/>

		<!-- Check if you are in a working copy (you have checked out) -->
		<condition property="package.svninfo.workingcopy">
			<not>
				<equals arg1="${package.svninfo.globalrev}" arg2="exported" casesensitive="false" trim="true"/>
			</not>
		</condition>
		<fail unless="package.svninfo.workingcopy" message="Sorry, you are not in a working-copy of the repository. Please, make a checkout first."/>

		<!-- Get detailed information about this working copy -->
		<exec executable="svn" output="svninfo.tmp">
			<env key="LANG" value="en.UTF-8"/>
			<arg line="info ."/>
		</exec>
		
		<replaceregexp flags="g" file="svninfo.tmp" match=" +" replace="" />
		<replaceregexp byline="true" file="svninfo.tmp" match="^URL:(.+/[^/]*svn[^/]*/.+/tags/([^/]+).*)" replace="package.svninfo.URL=\1${line.separator}package.svninfo.RELEASE=\2"/>
		<replaceregexp byline="true" file="svninfo.tmp" match="^URL:.+/[^/]*svn[^/]*/(.+)$" replace="package.svninfo.URL=\1"/>
		<replaceregexp byline="true" file="svninfo.tmp" match="^([^:=]+):(.+)$" replace="package.svninfo.\1=\2" />
		<property file="svninfo.tmp"/>
		<delete file="svninfo.tmp" />
		
		<!-- This property is only set if you are not in a TAG -->
		<property name="package.svninfo.RELEASE" value="${package.tstamp}"/>

		<echo message="Building package for release ${package.svninfo.RELEASE} at ${package.svninfo.URL}"/>
		<echo message="Global revision is ${package.svninfo.globalrev}"/>
		<property name="package.release" value="${package.svninfo.RELEASE}"/>
		<echoproperties prefix="package" destfile="${builddir}/release-info.txt" format="text"/>
	</target>
	
	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="hibernatetool.lib" />

	<target name="database.schema.export" depends="compile" description="Gera o script SQL de criação do banco de dados">
		<mkdir dir="${distdir}" />
		<hibernatetool destdir="${distdir}">
			<classpath refid="hibernatetool.lib" />
			<jpaconfiguration persistenceunit="VirtualGoodsPu" />
			<hbm2ddl export="false" outputfilename="${create.database.filename}" update="false" />
		</hibernatetool>
	</target>

	<!--<target name="database.schema.update" depends="compile" description="Gera o script SQL de atualização do banco de dados">
		<mkdir dir="${distdir}" />
		<hibernatetool destdir="${distdir}">
			<classpath refid="hibernatetool.lib" />
			<jpaconfiguration persistenceunit="BiPu_Update" />
			<hbm2ddl export="false" outputfilename="${update.database.filename}" update="true" />
		</hibernatetool>
	</target>-->
</project>